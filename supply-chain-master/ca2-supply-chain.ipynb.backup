{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "    \n",
    "\n",
    "\n",
    "## Supply Chain Analytics\n",
    "---\n",
    "\n",
    "<img src=\"images/Walmart_logo.png\" alt=\"logo\" style=\"width: 200px;\"/>\n",
    "\n",
    "\n",
    "\n",
    "presented by:\n",
    "    - Sunil PRAKASH\n",
    "    - Gaelan GU\n",
    "    - Abhilasha K\n",
    "    - JiaYi LEE\n",
    "    - Ashok EAPEN\n",
    "\n",
    "\n",
    "<link rel=\"stylesheet\" type=\"text/css\" href=\"./custom.css\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Agenda\n",
    "\n",
    "- Demand Forecasting\n",
    "- Inventory Management\n",
    "- Stock Forecasing\n",
    "- Warehouse Optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "#### Demand Forecasting\n",
    "\n",
    "<img src=\"images/wallmart_df_1.jpg\"  style=\"width: 300px;float:right\"/>\n",
    "\n",
    "### Background\n",
    "\n",
    "- Important to forecast sales for business planning purposes\n",
    "- Overestimation leads to surplus of goods and underestimation creates a potential stockout situation\n",
    "- Forecasts are not always correct - but in walmart's case, seasonality can easily be accounted for\n",
    "- Net sales figures in millions extracted from walmart's quarterly reports from fy 2010 to 2018\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python2.7/site-packages/IPython/html.py:14: ShimWarning: The `IPython.html` package has been deprecated since IPython 4.0. You should import from `notebook` instead. `IPython.html.widgets` has moved to `ipywidgets`.\n",
      "  \"`IPython.html.widgets` has moved to `ipywidgets`.\", ShimWarning)\n",
      "/usr/local/lib/python2.7/site-packages/ipykernel_launcher.py:3: UserWarning: locate_profile has moved to the IPython.paths module since IPython 4.0.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{u'start_slideshow_at': 'selected', u'theme': 'serif', u'transition': 'zoom'}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.html.services.config import ConfigManager\n",
    "from IPython.utils.path import locate_profile\n",
    "cm = ConfigManager(profile_dir=locate_profile(get_ipython().profile))\n",
    "cm.update('livereveal', {\n",
    "              'theme': 'serif',\n",
    "              'transition': 'zoom',\n",
    "              'start_slideshow_at': 'selected',\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "slideshow": {
     "slide_type": "notes"
    }
   },
   "outputs": [],
   "source": [
    "import folium\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from ipywidgets import interact \n",
    "%matplotlib inline\n",
    "\n",
    "df = pd.read_csv('demand_forecasting/walmart_rev.csv')\n",
    "\n",
    "split_ix = 28\n",
    "train_ix = range(0, 28)\n",
    "test_ix = range(28, 34)\n",
    "\n",
    "ts = pd.Series(df['revenue_millions'])\n",
    "train = pd.Series(df['revenue_millions'][:split_ix], index=train_ix)\n",
    "test = pd.Series(df['revenue_millions'][split_ix:], index=test_ix)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true,
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nERHJIP8fgU1Rhnzur6gAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1106d7510>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ts.plot(figsize=(10,5), title='Walmart Quarterly Revenue from FY2010 to FY2018')\n",
    "plt.xticks(range(0, 34, 1))\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "<small>\n",
    " It would appear that there is level, trend and seasonality that exists in Walmart's quarterly earnings over the past 8 years.\n",
    "\n",
    "An **increasing trend** seems to occur within this time period, however the rate of increase begins to decrease around the start of FY 2015 (index 20); trend starts to plateau.\n",
    "\n",
    "There is also a **strong seasonality** pattern due to expected consumer behaviour which happens throughout the year due to yearly affairs. For example, there is always a peak in revenue figures in Q4 because of holiday events like Black Friday, Christmas and New Year's which take place around year's end.\n",
    "\n",
    "</small>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def initial_trend(series, slen):\n",
    "    sum = 0.0\n",
    "    for i in range(slen):\n",
    "        sum += float(series[i+slen] - series[i]) / slen\n",
    "    return sum / slen\n",
    "\n",
    "def initial_seasonal_components(series, slen):\n",
    "    seasonals = {}\n",
    "    season_averages = []\n",
    "    n_seasons = int(len(series)/slen)\n",
    "    # compute season averages\n",
    "    for j in range(n_seasons):\n",
    "        season_averages.append(sum(series[slen*j:slen*j+slen])/float(slen))\n",
    "    # compute initial values\n",
    "    for i in range(slen):\n",
    "        sum_of_vals_over_avg = 0.0\n",
    "        for j in range(n_seasons):\n",
    "            sum_of_vals_over_avg += series[slen*j+i]-season_averages[j]\n",
    "        seasonals[i] = sum_of_vals_over_avg/n_seasons\n",
    "    return seasonals\n",
    "\n",
    "def triple_exp_smoothing(series, slen, alpha, beta, gamma, n_preds):\n",
    "    result = []\n",
    "    seasonals = initial_seasonal_components(series, slen)\n",
    "    for i in range(len(series)+n_preds):\n",
    "        if i == 0: # initial values\n",
    "            smooth = series[0]\n",
    "            trend = initial_trend(series, slen)\n",
    "            result.append(series[0])\n",
    "            continue\n",
    "        if i >= len(series): # we are forecasting\n",
    "            m = i - len(series) + 1\n",
    "            result.append((smooth + m*trend) + seasonals[i%slen])\n",
    "        else:\n",
    "            val = series[i]\n",
    "            last_smooth, smooth = smooth, alpha*(val-seasonals[i%slen]) + (1-alpha)*(smooth+trend)\n",
    "            trend = beta * (smooth-last_smooth) + (1-beta)*trend\n",
    "            seasonals[i%slen] = gamma*(val-smooth) + (1-gamma)*seasonals[i%slen]\n",
    "            result.append(smooth+trend+seasonals[i%slen])\n",
    "    return result\n",
    "\n",
    "\n",
    "\n",
    "# @interact\n",
    "# def forecast_stocks(period=4):\n",
    "#     return triple_exp_smoothing(ts, 4, 0.1, 0.5, 0.9, period)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAE for triple exponential smoothing on the test set is 458.33\n",
      "The MSE for triple exponential smoothing on the test set is 409901.11\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "es3 = triple_exp_smoothing(train, 4, 0.1, 0.5, 0.9, 6)\n",
    "es3_test = pd.Series(es3[split_ix:], index=test_ix)\n",
    "es3_mae = mean_absolute_error(test, es3_test)\n",
    "print('The MAE for triple exponential smoothing on the test set is %.2f' %es3_mae)\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "es3_mse = mean_squared_error(test, es3_test)\n",
    "print('The MSE for triple exponential smoothing on the test set is %.2f' %es3_mse)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1135b36d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test.plot(figsize=(10,5), label='Test', legend=True)\n",
    "es3_test.plot(figsize=(10,5), color='r', label='Triple ES', legend=True)\n",
    "plt.title('Triple Exponential Smoothing (Holt-Winters) on Test Set')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1974e30a17e542dbbbce6cf69fcc18c4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>interactive</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in Jupyter Notebook or JupyterLab, it may mean\n",
       "  that the widgets JavaScript is still loading. If this message persists, it\n",
       "  likely means that the widgets JavaScript library is either not installed or\n",
       "  not enabled. See the <a href=\"https://ipywidgets.readthedocs.io/en/stable/user_install.html\">Jupyter\n",
       "  Widgets Documentation</a> for setup instructions.\n",
       "</p>\n",
       "<p>\n",
       "  If you're reading this message in another notebook frontend (for example, a static\n",
       "  rendering on GitHub or <a href=\"https://nbviewer.jupyter.org/\">NBViewer</a>),\n",
       "  it may mean that your frontend doesn't currently support widgets.\n",
       "</p>\n"
      ],
      "text/plain": [
       "interactive(children=(IntSlider(value=4, description=u'period', max=12, min=-4), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "@interact\n",
    "def forecast_stocks(period=4):\n",
    "    es3_p = triple_exp_smoothing(ts, 4, 0.1, 0.5, 0.9, period)\n",
    "    es3_p = pd.Series(es3_p)\n",
    "    ts.plot(figsize=(10,5), color='b', label='actual', legend=True)\n",
    "    es3_p[33:].plot(figsize=(10,5), color='r', label='predicted', legend=True)\n",
    "    plt.xticks(range(0, 37, 1))\n",
    "    plt.title(\"Forecasted Demand for Walmart's Next 4 Quarters\")\n",
    "    #plt.show()\n",
    "\n",
    "\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Warehouse and Inventory"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Data Distribution\n",
    "\n",
    "![](images/shipment.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Economic Order Quantity Formula\n",
    "$$ EOQ = \\sqrt{\\frac{2OD}{CI}}$$\n",
    "* O = Ordering Costs\n",
    "* D = Annual Demand rate\n",
    "* C = Unit Costs\n",
    "* I = Holding rate (% per year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Calculated annual demand is ', 549179)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "%matplotlib notebook\n",
    "import math\n",
    "\n",
    "\n",
    "\n",
    "parser = lambda x: pd.to_datetime(x, format='%Y-%m-%d', errors='coerce')\n",
    "df_inventory = pd.read_csv('inventory_management/footwear_inventory_dataset.csv', index_col=['Unnamed: 0'], parse_dates=['ARRIVAL DATE'], date_parser=parser)\n",
    "\n",
    "df_inventory['YEAR'] = df_inventory['ARRIVAL DATE'].dt.year\n",
    "filtered_df = df_inventory[df_inventory['YEAR'] == 2013]\n",
    "annual_demand = filtered_df['QUANTITY'].sum()\n",
    "print (\"Calculated annual demand is \",annual_demand)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Assuming\n",
    "* O = \\$100\n",
    "* C = \\$10\n",
    "* I = 10%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46994491dd74446ab57ab4eb3ec86f95",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>interactive</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in Jupyter Notebook or JupyterLab, it may mean\n",
       "  that the widgets JavaScript is still loading. If this message persists, it\n",
       "  likely means that the widgets JavaScript library is either not installed or\n",
       "  not enabled. See the <a href=\"https://ipywidgets.readthedocs.io/en/stable/user_install.html\">Jupyter\n",
       "  Widgets Documentation</a> for setup instructions.\n",
       "</p>\n",
       "<p>\n",
       "  If you're reading this message in another notebook frontend (for example, a static\n",
       "  rendering on GitHub or <a href=\"https://nbviewer.jupyter.org/\">NBViewer</a>),\n",
       "  it may mean that your frontend doesn't currently support widgets.\n",
       "</p>\n"
      ],
      "text/plain": [
       "interactive(children=(IntSlider(value=100, description=u'order', max=300, min=-100), IntSlider(value=10, description=u'cost', max=30, min=-10), IntSlider(value=10, description=u'interest', max=30, min=-10), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact\n",
    "def eoq_optimization(order=100,cost=10,interest=10):\n",
    "    if order>0 and cost>0 and interest>0:\n",
    "        EOQ = int(math.sqrt((2*order*annual_demand)/(cost*interest/100.)))\n",
    "        print (\"Economic Order Quantity is\",EOQ)\n",
    "    else:\n",
    "        print(\"Values cannot be -ve\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Warehouse Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "from gurobipy import *\n",
    "\n",
    "# Store demand in thousands of units\n",
    "demand = [15, 18, 24, 20]\n",
    "\n",
    "# Distribution_Centre capacity in thousands of units\n",
    "capacity = [20, 28, 25, 31, 24]\n",
    "\n",
    "# Fixed costs for each Distribution_Centre\n",
    "fixedCosts = [12000, 15000, 17000, 13000, 16000]\n",
    "\n",
    "# Transportation costs per thousand units\n",
    "transCosts = [[4000, 2000, 3000, 2500, 4500],\n",
    "              [2500, 2600, 3400, 3000, 4000],\n",
    "              [1200, 1800, 2600, 4100, 3000],\n",
    "              [2200, 2600, 3100, 3700, 3200]\n",
    "              \n",
    "             ]\n",
    "\n",
    "# Range of Distribution_Centres and Stores\n",
    "Distribution_Centres = range(len(capacity))\n",
    "Stores = range(len(demand))\n",
    "\n",
    "# Model\n",
    "m = Model(\"facility\")\n",
    "\n",
    "# Distribution_Centre open decision variables: open[p] == 1 if Distribution_Centre p is open.\n",
    "open = m.addVars(Distribution_Centres,\n",
    "                 vtype=GRB.BINARY,\n",
    "                 obj=fixedCosts,\n",
    "                 name=\"open\")\n",
    "\n",
    "# Transportation decision variables: transport[w,p] captures the\n",
    "# optimal quantity to transport to Store w from Distribution_Centre p\n",
    "transport = m.addVars(Stores, Distribution_Centres, obj=transCosts, name=\"trans\")\n",
    "\n",
    "# You could use Python looping constructs and m.addVar() to create\n",
    "# these decision variables instead.  The following would be equivalent\n",
    "# to the preceding two statements...\n",
    "#\n",
    "#open = []\n",
    "#for p in Distribution_Centres:\n",
    "#  open.append(m.addVar(vtype=GRB.BINARY,\n",
    "#                       obj=fixedCosts[p],\n",
    "#                       name=\"open[%d]\" % p))\n",
    "#\n",
    "#transport = []\n",
    "#for w in Stores:\n",
    "#  transport.append([])\n",
    "#  for p in Distribution_Centres:\n",
    "#    transport[w].append(m.addVar(obj=transCosts[w][p],\n",
    "#                                 name=\"trans[%d,%d]\" % (w, p)))\n",
    "\n",
    "# The objective is to minimize the total fixed and variable costs\n",
    "m.modelSense = GRB.MINIMIZE\n",
    "\n",
    "# Production constraints\n",
    "# Note that the right-hand limit sets the production to zero if the Distribution_Centre\n",
    "# is closed\n",
    "m.addConstrs(\n",
    "    (transport.sum('*',p) <= capacity[p]*open[p] for p in Distribution_Centres),\n",
    "    \"Capacity\")\n",
    "\n",
    "# Using Python looping constructs, the preceding would be...\n",
    "#\n",
    "#for p in Distribution_Centres:\n",
    "#  m.addConstr(sum(transport[w][p] for w in Stores) <= capacity[p] * open[p],\n",
    "#              \"Capacity[%d]\" % p)\n",
    "\n",
    "# Demand constraints\n",
    "m.addConstrs(\n",
    "    (transport.sum(w) == demand[w] for w in Stores),\n",
    "    \"Demand\")\n",
    "\n",
    "# ... and the preceding would be ...\n",
    "#for w in Stores:\n",
    "#  m.addConstr(sum(transport[w][p] for p in Distribution_Centres) == demand[w], \"Demand[%d]\" % w)\n",
    "\n",
    "# Guess at the starting point: close the Distribution_Centre with the highest fixed costs;\n",
    "# open all others\n",
    "\n",
    "# First, open all Distribution_Centres\n",
    "for p in Distribution_Centres:\n",
    "    open[p].start = 1.0\n",
    "\n",
    "# Now close the Distribution_Centre with the highest fixed cost\n",
    "print('Initial guess:')\n",
    "maxFixed = max(fixedCosts)\n",
    "for p in Distribution_Centres:\n",
    "    if fixedCosts[p] == maxFixed:\n",
    "        open[p].start = 0.0\n",
    "        print('Closing Distribution_Centre %s' % p)\n",
    "        break\n",
    "print('')\n",
    "\n",
    "# Use barrier to solve root relaxation\n",
    "m.Params.method = 2\n",
    "\n",
    "# Solve\n",
    "m.optimize()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'm' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-f3f41e0326da>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Print solution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nTOTAL COSTS: %g'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobjVal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'SOLUTION:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mDistribution_Centres\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.99\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'm' is not defined"
     ]
    }
   ],
   "source": [
    "# Print solution\n",
    "print('\\nTOTAL COSTS: %g' % m.objVal)\n",
    "print('SOLUTION:')\n",
    "for p in Distribution_Centres:\n",
    "    if open[p].x > 0.99:\n",
    "        print('Distribution_Centre %s open' % p)\n",
    "        for w in Stores:\n",
    "            if transport[w,p].x > 0:\n",
    "                print('  Transport %g units to Store %s' % \\\n",
    "                      (transport[w,p].x, w))\n",
    "    else:\n",
    "        print('Distribution_Centre %s closed!' % p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Vehicle Routing Optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objective : \n",
    "\n",
    "- To find shortest route to optimize the Utilization \n",
    "- Shortest Route from to warehouse to all distribution centers was Found\n",
    "- Distribution Center And WareHouse dataset Of USA\n",
    "- Vehicle Routing Problem, Best possible route was found\n",
    "\n",
    "<span>\n",
    "<img src=\"images/routing_1.png\" alt=\"logo\" style=\"width: 200px height:100px;float:left\"/> &nbsp;\n",
    "<img src=\"images/routing_2.png\" alt=\"logo\" style=\"width: 200px height:100px; float:right; margin-top:5px\"/>\n",
    "</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "- But ,in real life routing just not depends on the shortest route\n",
    "- challenge is to find the most optimal route with given constraints\n",
    "- which should increase the utilization of vehicle and thus serving the objective\n",
    "- simulation to show process optimization \n",
    "\n",
    "<span>\n",
    "<img src=\"images/routing_3.png\" alt=\"logo\" style=\"width: 200px height:100px;float:left\"/> &nbsp;\n",
    "<img src=\"images/routing_4.png\" alt=\"logo\" style=\"width: 200px height:100px; float:right; margin-top:5px\"/>\n",
    "</span>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "- shows scenarios like trucks from warehouse going to the Distribution centers\n",
    "- waits till the time packing / unpacking is done then moves back to the warehouse\n",
    "- then to maximize the utilization of vehicles in the route we run optimization model \n",
    "- optimal no of trucks to be used in this route is 6 ,  \n",
    "- we are using 10, 4 vehicles can be used in other operations\n",
    "\n",
    "<span>\n",
    "<img src=\"images/routing_5.png\" alt=\"logo\" style=\"width: 200px height:100px;float:left\"/> &nbsp;\n",
    "<img src=\"images/routing_6.png\" alt=\"logo\" style=\"width: 200px height:100px; float:right; margin-top:5px\"/>\n",
    "</span>\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "<video controls src=\"images/final_recording.mov\" />\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Reverse Logistic\n",
    "\n",
    "<img src=\"images/rev_1.png\" alt=\"routing\" style=\"width: 400px;  float:right; margin-bottom:10px\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "from __future__ import print_function\n",
    "from ortools.constraint_solver import pywrapcp\n",
    "from ortools.constraint_solver import routing_enums_pb2\n",
    "\n",
    "# Travelling Time callback\n",
    "class CreateTravellingTimeCallback(object):\n",
    "    \"\"\"Create callback to calculate travelling time between points.\"\"\"\n",
    "\n",
    "    def __init__(self):\n",
    "        \"\"\"Array of time taken between points to travel\"\"\"\n",
    "\n",
    "        # travelling time in minutes\n",
    "        self.time_matrix = [\n",
    "            [0,  26, 16, 10, 9,\t 10,  8, 20, 14, 20], # Allegheny Center\n",
    "            [26, 0,\t 18, 24, 26, 28,  2, 22, 30, 24], # Lincoln Place\n",
    "            [16, 18, 0,\t 7,\t 9,\t 14,  1, 16, 16, 20], # North Oakland\n",
    "            [10, 24, 7,\t 0,\t 3,\t 10,  4, 16, 12, 18], # Wexford\n",
    "            [9,\t 26, 9,\t 3,\t 0,\t 10,  4, 16, 12, 16], # South Oakland\n",
    "            [10, 28, 14, 10, 10,  0,  1, 16, 4,\t 24], # Terrace Village\n",
    "            [8,\t 26, 10, 4,\t 4,\t 10,  0, 18, 12, 18], # Highland Park\n",
    "            [20, 22, 16, 16, 16, 16,  18, 0, 22, 35], # Fairywood\n",
    "            [14, 30, 16, 12, 12, 4,\t  12, 22, 0, 26], # Deutschtown\n",
    "            [20, 24, 20, 18, 16, 24,  18, 35, 26, 0], # Brookline\n",
    "        ]\n",
    "\n",
    "    def TravelTime(self,from_node, to_node):\n",
    "        return self.time_matrix[from_node][to_node]\n",
    "\n",
    "# Time Spend at location Callback (time in minutes)\n",
    "class CreateTimeSpendAtLocationCallback(object):\n",
    "    \"\"\"Create callback to get time to be spent at each location\"\"\"\n",
    "\n",
    "    def __init__(self, durations):\n",
    "        self.matrix = durations\n",
    "\n",
    "    def ExplorationTime(self, node):\n",
    "        return self.matrix[node]\n",
    "\n",
    "class CreateMoneySpendAtLocationCallback(object):\n",
    "    \"\"\"Create callback to get time to be spent at each location\"\"\"\n",
    "\n",
    "    def __init__(self, locations):\n",
    "        self.matrix = locations\n",
    "\n",
    "    def Cost(self, node,second):\n",
    "        return self.matrix[node]\n",
    "\n",
    "class CreateTotalTimeCallback(object):\n",
    "    \"\"\"Create callback to get total times between locations\"\"\"\n",
    "\n",
    "    def __init__(self,exploration_time_callback, travel_time_callback):\n",
    "        self.exploration_time_callback = exploration_time_callback\n",
    "        self.travel_time_callback = travel_time_callback\n",
    "\n",
    "    def TotalTime(self, from_node, to_node):\n",
    "        exploration_time = self.exploration_time_callback(from_node)\n",
    "        travel_time = self.travel_time_callback(from_node, to_node)\n",
    "        return exploration_time + travel_time\n",
    "\n",
    "def main_routing(num_routes=3,depot=6,time_window=12):\n",
    "\n",
    "    # locations\n",
    "    location_names = ['Allegheny Center','Lincoln Place','North Oakland','Wexford','South Oakland','Terrace Village',\n",
    "                        'Highland Park','Fairywood','Deutschtown','Brookline']\n",
    "\n",
    "    # weights (time in minutes)\n",
    "    location_weights = [120,120,60,60,120,240,30,60,120,60] # minimum time required to spend at each location\n",
    "    location_ticket_costs = [30,66,30,10,10,80,1,20,50,10]\n",
    "\n",
    "    l_size = len(location_names)\n",
    "    # The number of routes\n",
    "    #num_routes = 3\n",
    "\n",
    "    # Nodes are indexed from 0 to l_size - 1.\n",
    "    # The depot is the stating node of the route\n",
    "\n",
    "    #depot = 6\n",
    "\n",
    "\n",
    "    # Creating model\n",
    "    if l_size > 0:\n",
    "        routing = pywrapcp.RoutingModel(l_size,num_routes,depot)\n",
    "        search_parameters  = pywrapcp.RoutingModel.DefaultSearchParameters()\n",
    "\n",
    "        search_parameters.first_solution_strategy = (routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n",
    "\n",
    "        exploration_times = CreateTimeSpendAtLocationCallback(location_weights)\n",
    "        exploration_time_callback = exploration_times.ExplorationTime\n",
    "\n",
    "        travel_times = CreateTravellingTimeCallback()\n",
    "        travel_time_callback = travel_times.TravelTime\n",
    "\n",
    "        total_times = CreateTotalTimeCallback(exploration_time_callback,travel_time_callback)\n",
    "        total_time_callback = total_times.TotalTime\n",
    "\n",
    "        money_costs = CreateMoneySpendAtLocationCallback(location_ticket_costs)\n",
    "        money_cost_callback = money_costs.Cost\n",
    "\n",
    "        # time dimension , minutes in scale, max available time 12hrs\n",
    "        horizon = time_window * 60 *1 # 12hrs * 60 minutes\n",
    "        fix_start_cumul_to_zero = False\n",
    "        time = \"Time\"\n",
    "        money = \"Money\"\n",
    "\n",
    "        routing.SetArcCostEvaluatorOfAllVehicles(travel_time_callback)\n",
    "        #routing.SetFixedCostOfAllVehicles(horizon)\n",
    "\n",
    "\n",
    "        routing.AddDimension(total_time_callback,horizon,horizon,fix_start_cumul_to_zero, time)\n",
    "\n",
    "        max_budget = 1000\n",
    "        routing.AddDimension(money_cost_callback, max_budget, max_budget, fix_start_cumul_to_zero, money)\n",
    "        routing.AddVariableMinimizedByFinalizer(routing.CumulVar(0, money));\n",
    "\n",
    "        #  add cost constrains - TBD\n",
    "\n",
    "        print(\"trying to find solution\", routing.GetCostClassesCount())\n",
    "        # Solve and print solutions if any\n",
    "        possible_plan = routing.SolveWithParameters(search_parameters)\n",
    "\n",
    "        if possible_plan:\n",
    "            size = len(location_names)\n",
    "\n",
    "            # Solution Cost\n",
    "            print(\"Total time of all paths: \" + str(possible_plan.ObjectiveValue()) + \"\\n\")\n",
    "\n",
    "            # Inspect Solution\n",
    "            time_dimension = routing.GetDimensionOrDie(time)\n",
    "            cost_dimension = routing.GetDimensionOrDie(money)\n",
    "\n",
    "            #print(\"size is\", size)\n",
    "\n",
    "            for location in range(num_routes):\n",
    "                #print(\"starting..\",location)\n",
    "                index = routing.Start(location)\n",
    "                plan_output = 'Route {0}: '.format(location)\n",
    "\n",
    "\n",
    "                while not routing.IsEnd(index):\n",
    "                    #print(\".. still trying\",index)\n",
    "                    if index < 0:\n",
    "                        break\n",
    "                    node_index = routing.IndexToNode(index)\n",
    "                    time_var = time_dimension.CumulVar(index)\n",
    "                    cost_var = cost_dimension.CumulVar(index)\n",
    "                    plan_output += \\\n",
    "                                \"{node_index} Time({tmin},{tmax}) Cost({cmin},{cmax}) -> \".format(\n",
    "                                    node_index=location_names[node_index],\n",
    "                                    tmin=str(possible_plan.Min(time_var)),\n",
    "                                    tmax=str(possible_plan.Max(time_var)),\n",
    "                                    cmin=str(possible_plan.Min(cost_var)),\n",
    "                                    cmax=str(possible_plan.Min(cost_var)),\n",
    "                                )\n",
    "                    index = possible_plan.Value(routing.NextVar(index))\n",
    "\n",
    "                node_index = routing.IndexToNode(index)\n",
    "                time_var = time_dimension.CumulVar(index)\n",
    "                plan_output += \\\n",
    "                                \"{node_index} Time({tmin},{tmax}) -> \".format(\n",
    "                                    node_index=location_names[node_index],\n",
    "                                    tmin=str(possible_plan.Min(time_var)),\n",
    "                                    tmax=str(possible_plan.Max(time_var))\n",
    "                                )\n",
    "\n",
    "                print(plan_output)\n",
    "                print(\"\\n\")\n",
    "            #print(\"all done\")\n",
    "\n",
    "        else:\n",
    "            print(\"No Solution found\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Optimal Route?\n",
    "<img src=\"images/routing_11.png\" alt=\"routing\" style=\"width: 100%; height:100%; float:right; margin-bottom:10px\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f05fd566c4ac4bc2a0cdbaa19cb89219",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>interactive</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in Jupyter Notebook or JupyterLab, it may mean\n",
       "  that the widgets JavaScript is still loading. If this message persists, it\n",
       "  likely means that the widgets JavaScript library is either not installed or\n",
       "  not enabled. See the <a href=\"https://ipywidgets.readthedocs.io/en/stable/user_install.html\">Jupyter\n",
       "  Widgets Documentation</a> for setup instructions.\n",
       "</p>\n",
       "<p>\n",
       "  If you're reading this message in another notebook frontend (for example, a static\n",
       "  rendering on GitHub or <a href=\"https://nbviewer.jupyter.org/\">NBViewer</a>),\n",
       "  it may mean that your frontend doesn't currently support widgets.\n",
       "</p>\n"
      ],
      "text/plain": [
       "interactive(children=(IntSlider(value=3, description=u'num_routes', max=9, min=-3), IntSlider(value=6, description=u'depot', max=18, min=-6), IntSlider(value=12, description=u'time_window', max=36, min=-12), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact\n",
    "def calculate_optimal_route(num_routes=3,depot=6,time_window=12):\n",
    "    if num_routes>0 and (depot>-1 and depot<10) and time_window>0:\n",
    "        main_routing(num_routes,depot,time_window) \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Showing the routes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "m=folium.Map(\n",
    "    location=[1.366395, 103.806181],\n",
    "    tiles='Stamen Toner',\n",
    "    zoom_start=12\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Thank you ヾ(-_- )ゞ\n",
    " "
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
